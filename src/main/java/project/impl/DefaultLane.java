package project.impl;

import project.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultLane <br>
 * @version generated on Fri Sep 04 18:08:07 CEST 2020 by Micha≈Ç Barczyk
 */
public class DefaultLane extends WrappedIndividualImpl implements Lane {

    public DefaultLane(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#is_on_road
     */
     
    public Collection<? extends Road> getIs_on_road() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_ON_ROAD,
                                               DefaultRoad.class);
    }

    public boolean hasIs_on_road() {
	   return !getIs_on_road().isEmpty();
    }

    public void addIs_on_road(Road newIs_on_road) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_ON_ROAD,
                                       newIs_on_road);
    }

    public void removeIs_on_road(Road oldIs_on_road) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_ON_ROAD,
                                          oldIs_on_road);
    }


    /* ***************************************************
     * Data Property http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#lane_width
     */
     
    public Collection<? extends Integer> getLane_width() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_LANE_WIDTH, Integer.class);
    }

    public boolean hasLane_width() {
		return !getLane_width().isEmpty();
    }

    public void addLane_width(Integer newLane_width) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_LANE_WIDTH, newLane_width);
    }

    public void removeLane_width(Integer oldLane_width) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_LANE_WIDTH, oldLane_width);
    }


}
